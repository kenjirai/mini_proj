
  describe('inLogs', function () {
      before(async function () {
       console.log(await this.emitter.emitArgumentless());
       this.blockNum = await web3.eth.getBlockNumber();
       console.log(this.blockNum);
      });
      
      it('accepts emitted events', async function () {
         await eventExist(this.blockNum, this.emitter, 'Argumentless');
        //expectEvent.inLogs(this.logs, 'Argumentless');
      });

      /*
      it('throws if an unemitted event is requested', async function () {
        await shouldFail(eventExist(this.blockNum, this.emitter, 'Unemitted Event'));
      });

      it('accepts emitted events', async function () {
         await eventExist(this.blockNum, this.emitter, 'Argumentless');
        //expectEvent.inLogs(this.logs, 'Argumentless');
      });

      it('throws if an unemitted event is requested', async function () {
        await shouldFail(eventExist(this.blockNum, this.emitter, 'Unemitted Event'));
      });      
    */
    });
  });


/*
  describe('inConstructor', function () {
    context('short uint value', function () {
      
      it('accepts emitted events with correct number', async function () {
        await eventExist(this.blockNum, this.emitter, 'ShortUint', {value: this.constructionValues.uint});
      });
    

      it('throws if an incorrect value is passed', async function () {
          await shouldFail(eventExist(this.blockNum, this.emitter, 'ShortUint', {value: 23}));
        });
      });
 
    context('boolean value', function () {
    
      it('accepts emitted events with correct value', async function () {
        eventExist(this.emitter, 'Boolean', {value:this.constructionValues.boolean });
      });
      

      it('throws if an incorrect value is passed', async function () {
        await shouldFail(eventExist(this.emitter, 'Boolean', {value:!this.constructionValues.boolean }));
        });
    });

    context('string value', function () {
      it('accepts emitted events with correct string', async function () {
        await eventExist(this.emitter, 'String');
      });

      it('throws if an incorrect string is passed', async function () {
        await shouldFail(eventExist(this.emitter, 'String', {value: 'ClosedZeppelin' }));
      });
    

      it('throws if an unemitted event is requested', async function () {
        await shouldFail(eventExist(this.emitter, 'Unemitted Event'));
      });
    });
    
  });

});
*/

/*
  describe('inConstructor', function () {

    
    context('short uint value', function () {
      
      it('accepts emitted events with correct number', async function () {
        await eventExist(this.emitter, 'ShortUint', {value: this.constructionValues.uint});
      });
    

      it('throws if an incorrect value is passed', async function () {
          await shouldFail(eventExist(this.emitter, 'ShortUint', {value: 23}));
        });
      });
 
    context('boolean value', function () {
    
      it('accepts emitted events with correct value', async function () {
        eventExist(this.emitter, 'Boolean', {value:this.constructionValues.boolean });
      });
      

      it('throws if an incorrect value is passed', async function () {
        await shouldFail(eventExist(this.emitter, 'Boolean', {value:!this.constructionValues.boolean }));
        });
    });

    context('string value', function () {
      it('accepts emitted events with correct string', async function () {
        await eventExist(this.emitter, 'String');
      });

      it('throws if an incorrect string is passed', async function () {
        await shouldFail(eventExist(this.emitter, 'String', {value: 'ClosedZeppelin' }));
      });
    

      it('throws if an unemitted event is requested', async function () {
        await shouldFail(eventExist(this.emitter, 'Unemitted Event'));
      });
    });
  });

  describe('inLogs', function () {

    describe('with no arguments', function () {
      before(async function () {
       this.blockNum = await web3.eth.getBlockNumber()
       await this.emitter.emitArgumentless();
      });
      
      it('accepts emitted events', async function () {
         await eventExist(this.blockNum, this.emitter, 'Argumentless');
        //expectEvent.inLogs(this.logs, 'Argumentless');
      });


      it('throws if an unemitted event is requested', async function () {
        await shouldFail(eventExist(this.blockNum, this.emitter, 'Unemitted Event'));
      });

      it('accepts emitted events', async function () {
         await eventExist(this.blockNum, this.emitter, 'Argumentless');
        //expectEvent.inLogs(this.logs, 'Argumentless');
      });

      it('throws if an unemitted event is requested', async function () {
        await shouldFail(eventExist(this.blockNum, this.emitter, 'Unemitted Event'));
      });      
    