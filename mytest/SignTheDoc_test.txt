pragma solidity ^0.5.0;

import "remix_tests.sol"; // this import is automatically injected by Remix.
import "remix_accounts.sol";
import "./SignTheDoc.sol";

contract SignTheDocTest {

    SignTheDoc docTest;
    bytes signature;
    bytes32 docHash;
    address[] authorisedSignerList;
    //authorisedSigners[0] = msg.sender;
    uint256 expiryDate;

    function beforeAll() public {
      docTest = new SignTheDoc();
      signature = "0xcc09a814e20b0ff25f8bbc3b61c2c08aa5e0aad46f9272f5cd6f85a863ba16912983a1a71ff4a6ca413c97945077aae77bbcadf97a42588f7160b192464833021c";
      docHash = keccak256("Hello World!");
      //authorisedSignerList = [0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C];
      expiryDate = block.timestamp + 500;
   }

    function testCreateDocToSig() public {

      authorisedSignerList = [0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C];

      docTest.createDocToSign(msg.sender,
        expiryDate,
        docHash,
        signature,
        authorisedSignerList);

      (address retCreatorAddress,
      uint256 retCreationDate,
      uint256 retExpiryDate,
      bytes32 retDocHash,
      bytes memory retSignature,
      address[] memory retAuthorisedSignerList,
      address[] memory retWhoSigned) = docTest.getDocData(docHash);

      Assert.equal(retCreatorAddress, msg.sender, 'Hash should be equal');
      Assert.equal(retExpiryDate, expiryDate, 'Expiry Date set at Initial should be equal');
      Assert.equal(retDocHash, docHash, 'Hash should match');
      Assert.equal(keccak256(retSignature), keccak256(signature), 'Signature should match');
      Assert.equal(keccak256(abi.encodePacked(retAuthorisedSignerList)), keccak256(abi.encodePacked(authorisedSignerList)), 'Signature should match');
    }

    function testEmptyAuthorisedSignerList() public {
      authorisedSignerList;

      docTest.createDocToSign(msg.sender,
        expiryDate,
        docHash,
        signature,
        //pasing empty array
        authorisedSignerList);

      (address retCreatorAddress,
      uint256 retCreationDate,
      uint256 retExpiryDate,
      bytes32 retDocHash,
      bytes memory retSignature,
      address[] memory retAuthorisedSignerList,
      address[] memory retWhoSigned) = docTest.getDocData(docHash);

    Assert.equal(keccak256(abi.encodePacked(retAuthorisedSignerList)),
    keccak256(abi.encodePacked(authorisedSignerList)),
    'Empty initilise authoriseSignerList should be length 0');
  }

  function testSenderIs1 () public {
        Assert.equal(msg.sender, TestsAccounts.getAccount(0), msg.sender);
  }


}
